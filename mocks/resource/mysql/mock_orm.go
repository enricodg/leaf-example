// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/paulusrobin/leaf-utilities/database/sql/sql (interfaces: ORM)

// Package mock_leafSql is a generated GoMock package.
package mock_leafSql

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	leafModel "github.com/paulusrobin/leaf-utilities/common/model"
	leafSql "github.com/paulusrobin/leaf-utilities/database/sql/sql"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
	logger "gorm.io/gorm/logger"
	schema "gorm.io/gorm/schema"
)

// MockORM is a mock of ORM interface.
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
}

// MockORMMockRecorder is the mock recorder for MockORM.
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance.
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockORM) AddError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockORMMockRecorder) AddError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockORM)(nil).AddError), arg0)
}

// AllowGlobalUpdate mocks base method.
func (m *MockORM) AllowGlobalUpdate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowGlobalUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowGlobalUpdate indicates an expected call of AllowGlobalUpdate.
func (mr *MockORMMockRecorder) AllowGlobalUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowGlobalUpdate", reflect.TypeOf((*MockORM)(nil).AllowGlobalUpdate))
}

// Assign mocks base method.
func (m *MockORM) Assign(arg0 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockORMMockRecorder) Assign(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockORM)(nil).Assign), arg0...)
}

// Association mocks base method.
func (m *MockORM) Association(arg0 string) *gorm.Association {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Association", arg0)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association.
func (mr *MockORMMockRecorder) Association(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockORM)(nil).Association), arg0)
}

// Attrs mocks base method.
func (m *MockORM) Attrs(arg0 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockORMMockRecorder) Attrs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockORM)(nil).Attrs), arg0...)
}

// AutoMigrate mocks base method.
func (m *MockORM) AutoMigrate(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockORMMockRecorder) AutoMigrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockORM)(nil).AutoMigrate), arg0...)
}

// Begin mocks base method.
func (m *MockORM) Begin(arg0 context.Context, arg1 ...*sql.TxOptions) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockORMMockRecorder) Begin(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockORM)(nil).Begin), varargs...)
}

// BulkInsert mocks base method.
func (m *MockORM) BulkInsert(arg0 context.Context, arg1 int, arg2 ...leafSql.SqlQueryable) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkInsert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsert indicates an expected call of BulkInsert.
func (mr *MockORMMockRecorder) BulkInsert(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockORM)(nil).BulkInsert), varargs...)
}

// ClauseBuilders mocks base method.
func (m *MockORM) ClauseBuilders() map[string]clause.ClauseBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClauseBuilders")
	ret0, _ := ret[0].(map[string]clause.ClauseBuilder)
	return ret0
}

// ClauseBuilders indicates an expected call of ClauseBuilders.
func (mr *MockORMMockRecorder) ClauseBuilders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClauseBuilders", reflect.TypeOf((*MockORM)(nil).ClauseBuilders))
}

// Clauses mocks base method.
func (m *MockORM) Clauses(arg0 ...clause.Expression) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockORMMockRecorder) Clauses(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockORM)(nil).Clauses), arg0...)
}

// Commit mocks base method.
func (m *MockORM) Commit(arg0 context.Context) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockORMMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockORM)(nil).Commit), arg0)
}

// ConnPool mocks base method.
func (m *MockORM) ConnPool() gorm.ConnPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnPool")
	ret0, _ := ret[0].(gorm.ConnPool)
	return ret0
}

// ConnPool indicates an expected call of ConnPool.
func (mr *MockORMMockRecorder) ConnPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnPool", reflect.TypeOf((*MockORM)(nil).ConnPool))
}

// Count mocks base method.
func (m *MockORM) Count(arg0 context.Context, arg1 *int64) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockORMMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockORM)(nil).Count), arg0, arg1)
}

// Create mocks base method.
func (m *MockORM) Create(arg0 context.Context, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockORMMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockORM)(nil).Create), arg0, arg1)
}

// DB mocks base method.
func (m *MockORM) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockORMMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockORM)(nil).DB))
}

// Debug mocks base method.
func (m *MockORM) Debug() leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockORMMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockORM)(nil).Debug))
}

// Delete mocks base method.
func (m *MockORM) Delete(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockORMMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockORM)(nil).Delete), varargs...)
}

// Dialector mocks base method.
func (m *MockORM) Dialector() gorm.Dialector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialector")
	ret0, _ := ret[0].(gorm.Dialector)
	return ret0
}

// Dialector indicates an expected call of Dialector.
func (mr *MockORMMockRecorder) Dialector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialector", reflect.TypeOf((*MockORM)(nil).Dialector))
}

// DisableAutomaticPing mocks base method.
func (m *MockORM) DisableAutomaticPing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutomaticPing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableAutomaticPing indicates an expected call of DisableAutomaticPing.
func (mr *MockORMMockRecorder) DisableAutomaticPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutomaticPing", reflect.TypeOf((*MockORM)(nil).DisableAutomaticPing))
}

// DisableForeignKeyConstraintWhenMigrating mocks base method.
func (m *MockORM) DisableForeignKeyConstraintWhenMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableForeignKeyConstraintWhenMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableForeignKeyConstraintWhenMigrating indicates an expected call of DisableForeignKeyConstraintWhenMigrating.
func (mr *MockORMMockRecorder) DisableForeignKeyConstraintWhenMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableForeignKeyConstraintWhenMigrating", reflect.TypeOf((*MockORM)(nil).DisableForeignKeyConstraintWhenMigrating))
}

// Distinct mocks base method.
func (m *MockORM) Distinct(arg0 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockORMMockRecorder) Distinct(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockORM)(nil).Distinct), arg0...)
}

// DryRun mocks base method.
func (m *MockORM) DryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DryRun indicates an expected call of DryRun.
func (mr *MockORMMockRecorder) DryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRun", reflect.TypeOf((*MockORM)(nil).DryRun))
}

// Error mocks base method.
func (m *MockORM) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockORMMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockORM)(nil).Error))
}

// Exec mocks base method.
func (m *MockORM) Exec(arg0 context.Context, arg1 string, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockORMMockRecorder) Exec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockORM)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockORM) Find(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockORMMockRecorder) Find(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockORM)(nil).Find), varargs...)
}

// FindInBatches mocks base method.
func (m *MockORM) FindInBatches(arg0 context.Context, arg1 interface{}, arg2 int, arg3 func(leafSql.ORM, int) error) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockORMMockRecorder) FindInBatches(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockORM)(nil).FindInBatches), arg0, arg1, arg2, arg3)
}

// First mocks base method.
func (m *MockORM) First(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockORMMockRecorder) First(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockORM)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockORM) FirstOrCreate(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockORMMockRecorder) FirstOrCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockORM)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method.
func (m *MockORM) FirstOrInit(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockORMMockRecorder) FirstOrInit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockORM)(nil).FirstOrInit), varargs...)
}

// FullSaveAssociations mocks base method.
func (m *MockORM) FullSaveAssociations() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSaveAssociations")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FullSaveAssociations indicates an expected call of FullSaveAssociations.
func (mr *MockORMMockRecorder) FullSaveAssociations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSaveAssociations", reflect.TypeOf((*MockORM)(nil).FullSaveAssociations))
}

// Get mocks base method.
func (m *MockORM) Get(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockORMMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockORM)(nil).Get), arg0)
}

// Gorm mocks base method.
func (m *MockORM) Gorm() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gorm")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Gorm indicates an expected call of Gorm.
func (mr *MockORMMockRecorder) Gorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gorm", reflect.TypeOf((*MockORM)(nil).Gorm))
}

// Group mocks base method.
func (m *MockORM) Group(arg0 string) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockORMMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockORM)(nil).Group), arg0)
}

// Having mocks base method.
func (m *MockORM) Having(arg0 interface{}, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockORMMockRecorder) Having(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockORM)(nil).Having), varargs...)
}

// InstanceGet mocks base method.
func (m *MockORM) InstanceGet(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGet", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// InstanceGet indicates an expected call of InstanceGet.
func (mr *MockORMMockRecorder) InstanceGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGet", reflect.TypeOf((*MockORM)(nil).InstanceGet), arg0)
}

// InstanceSet mocks base method.
func (m *MockORM) InstanceSet(arg0 string, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceSet", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// InstanceSet indicates an expected call of InstanceSet.
func (mr *MockORMMockRecorder) InstanceSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceSet", reflect.TypeOf((*MockORM)(nil).InstanceSet), arg0, arg1)
}

// Joins mocks base method.
func (m *MockORM) Joins(arg0 string, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockORMMockRecorder) Joins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockORM)(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockORM) Last(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockORMMockRecorder) Last(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockORM)(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockORM) Limit(arg0 int) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockORMMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockORM)(nil).Limit), arg0)
}

// Logger mocks base method.
func (m *MockORM) Logger() logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockORMMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockORM)(nil).Logger))
}

// Migrator mocks base method.
func (m *MockORM) Migrator() gorm.Migrator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrator")
	ret0, _ := ret[0].(gorm.Migrator)
	return ret0
}

// Migrator indicates an expected call of Migrator.
func (mr *MockORMMockRecorder) Migrator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrator", reflect.TypeOf((*MockORM)(nil).Migrator))
}

// Model mocks base method.
func (m *MockORM) Model(arg0 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockORMMockRecorder) Model(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockORM)(nil).Model), arg0)
}

// NamingStrategy mocks base method.
func (m *MockORM) NamingStrategy() schema.Namer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamingStrategy")
	ret0, _ := ret[0].(schema.Namer)
	return ret0
}

// NamingStrategy indicates an expected call of NamingStrategy.
func (mr *MockORMMockRecorder) NamingStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamingStrategy", reflect.TypeOf((*MockORM)(nil).NamingStrategy))
}

// Not mocks base method.
func (m *MockORM) Not(arg0 interface{}, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockORMMockRecorder) Not(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockORM)(nil).Not), varargs...)
}

// NowFunc mocks base method.
func (m *MockORM) NowFunc() func() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowFunc")
	ret0, _ := ret[0].(func() time.Time)
	return ret0
}

// NowFunc indicates an expected call of NowFunc.
func (mr *MockORMMockRecorder) NowFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowFunc", reflect.TypeOf((*MockORM)(nil).NowFunc))
}

// Offset mocks base method.
func (m *MockORM) Offset(arg0 int) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockORMMockRecorder) Offset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockORM)(nil).Offset), arg0)
}

// Omit mocks base method.
func (m *MockORM) Omit(arg0 ...string) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockORMMockRecorder) Omit(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockORM)(nil).Omit), arg0...)
}

// Or mocks base method.
func (m *MockORM) Or(arg0 interface{}, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockORMMockRecorder) Or(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockORM)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockORM) Order(arg0 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockORMMockRecorder) Order(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockORM)(nil).Order), arg0)
}

// PaginateData mocks base method.
func (m *MockORM) PaginateData(arg0 context.Context, arg1 interface{}, arg2 leafSql.PaginateOptions) (leafModel.BasePagingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaginateData", arg0, arg1, arg2)
	ret0, _ := ret[0].(leafModel.BasePagingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaginateData indicates an expected call of PaginateData.
func (mr *MockORMMockRecorder) PaginateData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaginateData", reflect.TypeOf((*MockORM)(nil).PaginateData), arg0, arg1, arg2)
}

// Ping mocks base method.
func (m *MockORM) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockORMMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockORM)(nil).Ping), arg0)
}

// Pluck mocks base method.
func (m *MockORM) Pluck(arg0 context.Context, arg1 string, arg2 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", arg0, arg1, arg2)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockORMMockRecorder) Pluck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockORM)(nil).Pluck), arg0, arg1, arg2)
}

// Plugins mocks base method.
func (m *MockORM) Plugins() map[string]gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[string]gorm.Plugin)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockORMMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockORM)(nil).Plugins))
}

// Preload mocks base method.
func (m *MockORM) Preload(arg0 string, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockORMMockRecorder) Preload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockORM)(nil).Preload), varargs...)
}

// PrepareStmt mocks base method.
func (m *MockORM) PrepareStmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrepareStmt indicates an expected call of PrepareStmt.
func (mr *MockORMMockRecorder) PrepareStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStmt", reflect.TypeOf((*MockORM)(nil).PrepareStmt))
}

// Raw mocks base method.
func (m *MockORM) Raw(arg0 string, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockORMMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockORM)(nil).Raw), varargs...)
}

// Rollback mocks base method.
func (m *MockORM) Rollback(arg0 context.Context) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockORMMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockORM)(nil).Rollback), arg0)
}

// RollbackTo mocks base method.
func (m *MockORM) RollbackTo(arg0 context.Context, arg1 string) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo.
func (mr *MockORMMockRecorder) RollbackTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockORM)(nil).RollbackTo), arg0, arg1)
}

// Row mocks base method.
func (m *MockORM) Row(arg0 context.Context) *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row", arg0)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockORMMockRecorder) Row(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockORM)(nil).Row), arg0)
}

// Rows mocks base method.
func (m *MockORM) Rows(arg0 context.Context) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows", arg0)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockORMMockRecorder) Rows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockORM)(nil).Rows), arg0)
}

// RowsAffected mocks base method.
func (m *MockORM) RowsAffected() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockORMMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockORM)(nil).RowsAffected))
}

// Save mocks base method.
func (m *MockORM) Save(arg0 context.Context, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockORMMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockORM)(nil).Save), arg0, arg1)
}

// SavePoint mocks base method.
func (m *MockORM) SavePoint(arg0 context.Context, arg1 string) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockORMMockRecorder) SavePoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockORM)(nil).SavePoint), arg0, arg1)
}

// Scan mocks base method.
func (m *MockORM) Scan(arg0 context.Context, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockORMMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockORM)(nil).Scan), arg0, arg1)
}

// ScanRows mocks base method.
func (m *MockORM) ScanRows(arg0 context.Context, arg1 *sql.Rows, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows.
func (mr *MockORMMockRecorder) ScanRows(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockORM)(nil).ScanRows), arg0, arg1, arg2)
}

// Scopes mocks base method.
func (m *MockORM) Scopes(arg0 ...func(leafSql.ORM) leafSql.ORM) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockORMMockRecorder) Scopes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockORM)(nil).Scopes), arg0...)
}

// Select mocks base method.
func (m *MockORM) Select(arg0 interface{}, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockORMMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockORM)(nil).Select), varargs...)
}

// Session mocks base method.
func (m *MockORM) Session(arg0 *gorm.Session) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockORMMockRecorder) Session(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockORM)(nil).Session), arg0)
}

// Set mocks base method.
func (m *MockORM) Set(arg0 string, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockORMMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockORM)(nil).Set), arg0, arg1)
}

// SetupJoinTable mocks base method.
func (m *MockORM) SetupJoinTable(arg0 interface{}, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupJoinTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupJoinTable indicates an expected call of SetupJoinTable.
func (mr *MockORMMockRecorder) SetupJoinTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupJoinTable", reflect.TypeOf((*MockORM)(nil).SetupJoinTable), arg0, arg1, arg2)
}

// SimplePaginateData mocks base method.
func (m *MockORM) SimplePaginateData(arg0 context.Context, arg1 interface{}, arg2 leafSql.PaginateOptions) (leafModel.BaseSimplePagingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimplePaginateData", arg0, arg1, arg2)
	ret0, _ := ret[0].(leafModel.BaseSimplePagingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimplePaginateData indicates an expected call of SimplePaginateData.
func (mr *MockORMMockRecorder) SimplePaginateData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimplePaginateData", reflect.TypeOf((*MockORM)(nil).SimplePaginateData), arg0, arg1, arg2)
}

// SkipDefaultTransaction mocks base method.
func (m *MockORM) SkipDefaultTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipDefaultTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipDefaultTransaction indicates an expected call of SkipDefaultTransaction.
func (mr *MockORMMockRecorder) SkipDefaultTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipDefaultTransaction", reflect.TypeOf((*MockORM)(nil).SkipDefaultTransaction))
}

// Statement mocks base method.
func (m *MockORM) Statement() *gorm.Statement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(*gorm.Statement)
	return ret0
}

// Statement indicates an expected call of Statement.
func (mr *MockORMMockRecorder) Statement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockORM)(nil).Statement))
}

// Table mocks base method.
func (m *MockORM) Table(arg0 string, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockORMMockRecorder) Table(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockORM)(nil).Table), varargs...)
}

// Take mocks base method.
func (m *MockORM) Take(arg0 context.Context, arg1 interface{}, arg2 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockORMMockRecorder) Take(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockORM)(nil).Take), varargs...)
}

// Transaction mocks base method.
func (m *MockORM) Transaction(arg0 context.Context, arg1 func(leafSql.ORM) error, arg2 ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockORMMockRecorder) Transaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockORM)(nil).Transaction), varargs...)
}

// Unscoped mocks base method.
func (m *MockORM) Unscoped() leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockORMMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockORM)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockORM) Update(arg0 context.Context, arg1 string, arg2 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockORMMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockORM)(nil).Update), arg0, arg1, arg2)
}

// UpdateColumn mocks base method.
func (m *MockORM) UpdateColumn(arg0 context.Context, arg1 string, arg2 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", arg0, arg1, arg2)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockORMMockRecorder) UpdateColumn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockORM)(nil).UpdateColumn), arg0, arg1, arg2)
}

// UpdateColumns mocks base method.
func (m *MockORM) UpdateColumns(arg0 context.Context, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockORMMockRecorder) UpdateColumns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockORM)(nil).UpdateColumns), arg0, arg1)
}

// Updates mocks base method.
func (m *MockORM) Updates(arg0 context.Context, arg1 interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0, arg1)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockORMMockRecorder) Updates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockORM)(nil).Updates), arg0, arg1)
}

// Use mocks base method.
func (m *MockORM) Use(arg0 gorm.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockORMMockRecorder) Use(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockORM)(nil).Use), arg0)
}

// Where mocks base method.
func (m *MockORM) Where(arg0 interface{}, arg1 ...interface{}) leafSql.ORM {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockORMMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockORM)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockORM) WithContext(arg0 context.Context) leafSql.ORM {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(leafSql.ORM)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockORMMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockORM)(nil).WithContext), arg0)
}
